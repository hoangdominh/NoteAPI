					<< Creating API for Dumping Excel data to MYSQL using Spring Boot >> 
	
!!! CONTROLLER : 
	public void exportExcel(HttpServletResponse response, @PathVariable long taskId,
                            @RequestParam long month,
                            @RequestParam long year

    	) throws IOException {
        	response.setContentType("application/octet-stream");
        	String headerKey = "Content-Disposition";
        	String headerValue = "attachment; filename=Phu_luc.xlsx";
        	response.setHeader(headerKey, headerValue);
        	progressUpdateService.exportExcel(response,taskId,month,year);
    	}


!!! IMPL : 
    exportExcel => createCell => writeHeaderLine =>  (! setBordersToMergedCells - set border hoặc merged cell) =>  setStyle => writeDataLine
				
    public void exportExcel(HttpServletResponse response, long taskId, long month, long year) throws IOException {
        List<TaskDiaryBean> results = taskDiaryDAO.getListTaskDiary(taskId, month, year);
        XSSFWorkbook workbook = new XSSFWorkbook();
        writeHeaderLine(workbook);
        writeDataLine(results,workbook);
        ServletOutputStream outputStream = response.getOutputStream();
        if(!results.isEmpty()){
            workbook.write(outputStream);
            workbook.close();
        }
        outputStream.close();
    }

    private void createCell(Row row, int columnCount, Object value, CellStyle style) {
        Cell cell = row.createCell(columnCount);
        if (value instanceof Long) {
            cell.setCellValue((Long) value);
        } else if (value instanceof Integer) {
            cell.setCellValue((Integer) value);
        } else if (value instanceof Boolean) {
            cell.setCellValue((Boolean) value);
        } else if (value instanceof Timestamp) {
            cell.setCellValue((Timestamp) value);
        } else if (value instanceof Date) {
            cell.setCellValue((Date) value);
        } else {
            cell.setCellValue((String) value);
        }
        style.setWrapText(true);
        cell.setCellStyle(style);
    }


    private void writeHeaderLine(XSSFWorkbook workbook) {
        sheet = workbook.createSheet("Phụ lục");
        XSSFCellStyle style = workbook.createCellStyle();
        XSSFFont font = workbook.createFont();
        font.setBold(true); // Bôi đậm chữ
        font.setFontName("Times New Roman");
        font.setFontHeight(14);
        setStyle(style);
        style.setFillForegroundColor(new XSSFColor(new java.awt.Color(153, 204, 255)));
        style.setFillPattern(FillPatternType.SOLID_FOREGROUND);

        style.setFont(font);
        Row row = sheet.createRow(0); // Hàng đầu tiên
        createCell(row, 0, "PHỤ LỤC: TỔNG HỢP CÁC NỘI DUNG TỒN TẠI CẦN KHẮC PHỤC", style);
        sheet.addMergedRegion(new CellRangeAddress(0, 0, 0, 8));
        row = sheet.createRow(2);
        createCell(row, 0, "STT", style);
        sheet.addMergedRegion(new CellRangeAddress(2, 3, 0, 0));
        sheet.setColumnWidth(0, 5 * 256);
        createCell(row, 1, "Ngày", style);
        sheet.addMergedRegion(new CellRangeAddress(2, 3, 1, 1));
        sheet.setColumnWidth(1, 30 * 256);
        createCell(row, 2, "Đơn vị", style);
        sheet.addMergedRegion(new CellRangeAddress(2, 3, 2, 2));
        sheet.setColumnWidth(2, 30 * 256);
        createCell(row, 3, "Nội dung tồn tại", style);
        sheet.addMergedRegion(new CellRangeAddress(2, 3, 3, 3));
        sheet.setColumnWidth(3, 40 * 256);
        createCell(row, 4, "Chi tiết tồn tại", style);
        sheet.addMergedRegion(new CellRangeAddress(2, 3, 4, 4));
        sheet.setColumnWidth(4, 40 * 256);
        createCell(row, 5, "Giá trị truy thu / xuất toán", style);
        sheet.addMergedRegion(new CellRangeAddress(2, 3, 5, 5));
        sheet.setColumnWidth(5, 50 * 256);
        createCell(row, 6, "Cơ sở pháp lý", style);
        sheet.addMergedRegion(new CellRangeAddress(2, 3, 6, 6));
        sheet.setColumnWidth(6, 40 * 256);
        createCell(row, 7, "Biện pháp khắc phục", style);
        sheet.addMergedRegion(new CellRangeAddress(2, 3, 7, 7));
        sheet.setColumnWidth(7, 40 * 256);
        createCell(row, 8, "Đơn vị khắc phục", style);
        sheet.addMergedRegion(new CellRangeAddress(2, 3, 8, 8));
        sheet.setColumnWidth(8, 40 * 256);
        createCell(row, 9, "Đơn vị hỗ trợ", style);
        sheet.addMergedRegion(new CellRangeAddress(2, 3, 9, 9));
        sheet.setColumnWidth(9, 30 * 256);
        createCell(row, 10, "Thời hạn hoàn thành", style);
        sheet.addMergedRegion(new CellRangeAddress(2, 3, 10, 10));
        sheet.setColumnWidth(10, 40 * 256);
        createCell(row, 11, "Ý kiến đơn vị", style);
        sheet.addMergedRegion(new CellRangeAddress(2, 3, 11, 11));
        sheet.setColumnWidth(11, 30 * 256);
        createCell(row, 12, "Trạng thái", style);
        sheet.addMergedRegion(new CellRangeAddress(2, 3, 12, 12));
        sheet.setColumnWidth(12, 20 * 256);
        createCell(row, 13, "Đầu mối đơn vị thực hiện", style);
        sheet.addMergedRegion(new CellRangeAddress(2, 3, 13, 13));
        sheet.setColumnWidth(13, 40 * 256);
        setBordersToMergedCells(sheet);
        setStyle(style);
    }
    private void setBordersToMergedCells(Sheet sheet) {
        List<CellRangeAddress> mergedRegions = sheet.getMergedRegions();
        for (CellRangeAddress rangeAddress : mergedRegions) {
            RegionUtil.setBorderTop(BorderStyle.THIN, rangeAddress, sheet);
            RegionUtil.setBorderLeft(BorderStyle.THIN, rangeAddress, sheet);
            RegionUtil.setBorderRight(BorderStyle.THIN, rangeAddress, sheet);
            RegionUtil.setBorderBottom(BorderStyle.THIN, rangeAddress, sheet);
        }
    }
    private void setStyle(CellStyle style) {
        style.setAlignment(HorizontalAlignment.CENTER);
        style.setVerticalAlignment(VerticalAlignment.CENTER);
        style.setBorderTop(BorderStyle.THIN);
        style.setBorderBottom(BorderStyle.THIN);
        style.setBorderLeft(BorderStyle.THIN);
        style.setBorderRight(BorderStyle.THIN);
    }

    private void writeDataLine(List<TaskDiaryBean> taskDiaryBeans,XSSFWorkbook workbook) {
        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
        int rowCount = 4;
        CellStyle style = workbook.createCellStyle();
        XSSFFont font = workbook.createFont();
        font.setFontName("Times New Roman");
        font.setFontHeight(13);
        style.setFont(font);
        setStyle(style);
        sheet.setColumnWidth(0, 10 * 256);
        int i = 1;
        for (TaskDiaryBean taskDiary : taskDiaryBeans) {
            if (taskDiary != null) {
                Row row = sheet.createRow(rowCount++);
                style = workbook.createCellStyle();
                font = workbook.createFont();
                font.setFontName("Times New Roman");
                font.setFontHeight(13);
                style.setFont(font);
                setStyle(style);
                int columnCount = 0;
                createCell(row, columnCount++, i, style);
                createCell(row, columnCount++, formatter.format(new Timestamp(taskDiary.getDiaryDate().getTime())), style);
                createCell(row, columnCount++, taskDiary.getName(), style);
                createCell(row, columnCount++, taskDiary.getContent(), style);
                createCell(row, columnCount++, taskDiary.getDetailsExist(), style);
                createCell(row, columnCount++, taskDiary.getRetrievalValue(), style);
                createCell(row, columnCount++, taskDiary.getLegalBasis(), style);
                createCell(row, columnCount++, taskDiary.getRemedies(), style);
                createCell(row, columnCount++, taskDiary.getRemedialOrganizationName(), style);
                createCell(row, columnCount++, taskDiary.getSupportOrganizationName(), style);
                if (taskDiary.getDeadline() == null) {
                    createCell(row, columnCount++, "", style);
                } else {
                    createCell(row, columnCount++, formatter.format(new Timestamp(taskDiary.getDeadline().getTime())), style);
                }
                createCell(row, columnCount++, taskDiary.getUnitIdea(), style);
                if ("PROCESSING".equals(taskDiary.getStatus())){
                    createCell(row, columnCount++,"Đang thực hiện", style);
                }
                if ("COMPLETE".equals(taskDiary.getStatus())){
                    createCell(row, columnCount++,"Đã hoàn thành", style);
                }
                if ("AHEAD_OF_TIME".equals(taskDiary.getStatus())){
                    createCell(row, columnCount++, "Hoàn thành trước thời hạn", style);
                }
                if ("CLOSE".equals(taskDiary.getStatus())){
                    createCell(row, columnCount++, "Xin đóng việc", style);
                }
                if ("EXTEND".equals(taskDiary.getStatus())){
                    createCell(row, columnCount++, "Xin gia hạn", style);
                }
                createCell(row, columnCount, taskDiary.getContactUserName(), style);
                ++i;
            }

        }
    }

